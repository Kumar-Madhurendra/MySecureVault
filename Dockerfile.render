FROM php:8.2-apache

WORKDIR /var/www/html

# Install system dependencies
RUN apt-get update && apt-get install -y \
    git \
    curl \
    libpng-dev \
    libonig-dev \
    libxml2-dev \
    zip \
    unzip \
    npm \
    nodejs \
    autoconf \
    build-essential \
    libssl-dev \
    pkg-config

# Install PHP extensions
RUN docker-php-ext-install pdo_mysql mbstring exif pcntl bcmath gd

# Install MongoDB PHP extension
RUN pecl install mongodb && docker-php-ext-enable mongodb

# Configure PHP to display errors
RUN echo "display_errors = On" >> /usr/local/etc/php/conf.d/error-reporting.ini \
    && echo "display_startup_errors = On" >> /usr/local/etc/php/conf.d/error-reporting.ini \
    && echo "error_reporting = E_ALL" >> /usr/local/etc/php/conf.d/error-reporting.ini \
    && echo "memory_limit = 256M" >> /usr/local/etc/php/conf.d/memory-limit.ini

# Create a specific Apache configuration
RUN echo '<VirtualHost *:80>\n\
    ServerAdmin webmaster@localhost\n\
    DocumentRoot /var/www/html/public\n\
    \n\
    <Directory /var/www/html/public>\n\
        Options Indexes FollowSymLinks\n\
        AllowOverride All\n\
        Require all granted\n\
    </Directory>\n\
    \n\
    ErrorLog ${APACHE_LOG_DIR}/error.log\n\
    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\
</VirtualHost>' > /etc/apache2/sites-available/000-default.conf

# Enable Apache modules
RUN a2enmod rewrite

# Copy application code
COPY . /var/www/html/

# Install Composer
COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

# Create directory structure if not exists
RUN mkdir -p storage/framework/sessions \
    storage/framework/views \
    storage/framework/cache \
    storage/framework/cache/data \
    storage/logs \
    bootstrap/cache

# Set correct permissions
RUN chmod -R 775 storage bootstrap/cache
RUN chmod -R 755 public

# Create a static .env file for Laravel
RUN echo "APP_NAME=MySecureVault\n\
APP_ENV=production\n\
APP_KEY=base64:qxSzYJ7RRJRf7+OWcblSCmYVxlXQcpMFLLnFmGM92sw=\n\
APP_DEBUG=true\n\
APP_URL=https://mysecurevault-3.onrender.com\n\
ASSET_URL=\${APP_URL}\n\
\n\
LOG_CHANNEL=stack\n\
LOG_LEVEL=debug\n\
\n\
 
\n\
BROADCAST_DRIVER=log\n\
CACHE_DRIVER=file\n\
CACHE_STORE=file\n\
SESSION_DRIVER=file\n\
SESSION_LIFETIME=120\n\
QUEUE_CONNECTION=sync\n\
\n\
MAIL_MAILER=smtp\n\
MAIL_HOST=mailpit\n\
MAIL_PORT=1025\n\
MAIL_USERNAME=null\n\
MAIL_PASSWORD=null\n\
MAIL_ENCRYPTION=null\n\
MAIL_FROM_ADDRESS=\"hello@example.com\"\n\
MAIL_FROM_NAME=\"\${APP_NAME}\"\n\
" > /var/www/html/.env

# Install MongoDB PHP library and Laravel MongoDB package
RUN composer require mongodb/mongodb
RUN composer require jenssegers/mongodb

# Install dependencies
RUN composer install --no-dev --optimize-autoloader --no-interaction

# Build frontend assets
RUN npm install && npm run build

# Create diagnostic files
RUN echo '<?php phpinfo(); ?>' > /var/www/html/test.php
RUN echo '<?php phpinfo(); ?>' > /var/www/html/public/phpinfo.php

# Clear Laravel caches
RUN php artisan config:clear
RUN php artisan cache:clear
RUN php artisan view:clear
RUN php artisan route:clear

# Publish view files and vendor files
RUN php artisan vendor:publish --tag=laravel-assets --force

# Create simple static PHP file in case Laravel fails
RUN echo '<?php echo json_encode(["status" => "OK", "message" => "Static file is working"]); ?>' > /var/www/html/public/static.php

# Make sure all files are readable by Apache
RUN chown -R www-data:www-data /var/www/html

# Create a startup script to run Laravel migrations
RUN echo '#!/bin/bash\n\
echo "Running Laravel migrations and setup..."\n\
php artisan config:cache\n\
php artisan view:cache\n\
php artisan route:cache\n\
php artisan migrate --force\n\
echo "Ensuring directory permissions..."\n\
chmod -R 775 /var/www/html/storage /var/www/html/bootstrap/cache\n\
chown -R www-data:www-data /var/www/html\n\
exec apache2-foreground\n\
' > /usr/local/bin/start-laravel.sh

RUN chmod +x /usr/local/bin/start-laravel.sh

# Expose port and start Apache with Laravel setup
EXPOSE 80
CMD ["/usr/local/bin/start-laravel.sh"] 
